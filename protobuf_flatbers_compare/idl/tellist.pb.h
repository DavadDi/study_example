// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tellist.proto

#ifndef PROTOBUF_tellist_2eproto__INCLUDED
#define PROTOBUF_tellist_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace as {
namespace tellist {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tellist_2eproto();
void protobuf_AssignDesc_tellist_2eproto();
void protobuf_ShutdownFile_tellist_2eproto();

class personal_info;
class personal_info_list;

enum gender_type {
  MALE = 0,
  FEMALE = 1,
  OTHER = 2
};
bool gender_type_IsValid(int value);
const gender_type gender_type_MIN = MALE;
const gender_type gender_type_MAX = OTHER;
const int gender_type_ARRAYSIZE = gender_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* gender_type_descriptor();
inline const ::std::string& gender_type_Name(gender_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    gender_type_descriptor(), value);
}
inline bool gender_type_Parse(
    const ::std::string& name, gender_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<gender_type>(
    gender_type_descriptor(), name, value);
}
// ===================================================================

class personal_info : public ::google::protobuf::Message {
 public:
  personal_info();
  virtual ~personal_info();

  personal_info(const personal_info& from);

  inline personal_info& operator=(const personal_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const personal_info& default_instance();

  void Swap(personal_info* other);

  // implements Message ----------------------------------------------

  personal_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const personal_info& from);
  void MergeFrom(const personal_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 age = 3;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 3;
  inline ::google::protobuf::uint32 age() const;
  inline void set_age(::google::protobuf::uint32 value);

  // optional .as.tellist.gender_type gender = 4;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 4;
  inline ::as::tellist::gender_type gender() const;
  inline void set_gender(::as::tellist::gender_type value);

  // optional uint64 phone_num = 5;
  inline bool has_phone_num() const;
  inline void clear_phone_num();
  static const int kPhoneNumFieldNumber = 5;
  inline ::google::protobuf::uint64 phone_num() const;
  inline void set_phone_num(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:as.tellist.personal_info)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_phone_num();
  inline void clear_has_phone_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 age_;
  ::google::protobuf::uint64 phone_num_;
  int gender_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_tellist_2eproto();
  friend void protobuf_AssignDesc_tellist_2eproto();
  friend void protobuf_ShutdownFile_tellist_2eproto();

  void InitAsDefaultInstance();
  static personal_info* default_instance_;
};
// -------------------------------------------------------------------

class personal_info_list : public ::google::protobuf::Message {
 public:
  personal_info_list();
  virtual ~personal_info_list();

  personal_info_list(const personal_info_list& from);

  inline personal_info_list& operator=(const personal_info_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const personal_info_list& default_instance();

  void Swap(personal_info_list* other);

  // implements Message ----------------------------------------------

  personal_info_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const personal_info_list& from);
  void MergeFrom(const personal_info_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .as.tellist.personal_info info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::as::tellist::personal_info& info(int index) const;
  inline ::as::tellist::personal_info* mutable_info(int index);
  inline ::as::tellist::personal_info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::as::tellist::personal_info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::as::tellist::personal_info >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:as.tellist.personal_info_list)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::as::tellist::personal_info > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_tellist_2eproto();
  friend void protobuf_AssignDesc_tellist_2eproto();
  friend void protobuf_ShutdownFile_tellist_2eproto();

  void InitAsDefaultInstance();
  static personal_info_list* default_instance_;
};
// ===================================================================


// ===================================================================

// personal_info

// optional uint32 id = 1;
inline bool personal_info::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void personal_info::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void personal_info::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void personal_info::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 personal_info::id() const {
  return id_;
}
inline void personal_info::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool personal_info::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void personal_info::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void personal_info::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void personal_info::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& personal_info::name() const {
  return *name_;
}
inline void personal_info::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void personal_info::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void personal_info::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* personal_info::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* personal_info::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void personal_info::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 age = 3;
inline bool personal_info::has_age() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void personal_info::set_has_age() {
  _has_bits_[0] |= 0x00000004u;
}
inline void personal_info::clear_has_age() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void personal_info::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 personal_info::age() const {
  return age_;
}
inline void personal_info::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
}

// optional .as.tellist.gender_type gender = 4;
inline bool personal_info::has_gender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void personal_info::set_has_gender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void personal_info::clear_has_gender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void personal_info::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::as::tellist::gender_type personal_info::gender() const {
  return static_cast< ::as::tellist::gender_type >(gender_);
}
inline void personal_info::set_gender(::as::tellist::gender_type value) {
  assert(::as::tellist::gender_type_IsValid(value));
  set_has_gender();
  gender_ = value;
}

// optional uint64 phone_num = 5;
inline bool personal_info::has_phone_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void personal_info::set_has_phone_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void personal_info::clear_has_phone_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void personal_info::clear_phone_num() {
  phone_num_ = GOOGLE_ULONGLONG(0);
  clear_has_phone_num();
}
inline ::google::protobuf::uint64 personal_info::phone_num() const {
  return phone_num_;
}
inline void personal_info::set_phone_num(::google::protobuf::uint64 value) {
  set_has_phone_num();
  phone_num_ = value;
}

// -------------------------------------------------------------------

// personal_info_list

// repeated .as.tellist.personal_info info = 1;
inline int personal_info_list::info_size() const {
  return info_.size();
}
inline void personal_info_list::clear_info() {
  info_.Clear();
}
inline const ::as::tellist::personal_info& personal_info_list::info(int index) const {
  return info_.Get(index);
}
inline ::as::tellist::personal_info* personal_info_list::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::as::tellist::personal_info* personal_info_list::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::as::tellist::personal_info >&
personal_info_list::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::as::tellist::personal_info >*
personal_info_list::mutable_info() {
  return &info_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tellist
}  // namespace as

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::as::tellist::gender_type>() {
  return ::as::tellist::gender_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tellist_2eproto__INCLUDED
