// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TEST_H_
#define FLATBUFFERS_GENERATED_TEST_H_

#include "flatbuffers.h"



struct myclass;

struct myclass FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t user_id() const { return GetField<uint32_t>(4, 0); }
  const flatbuffers::String *user_name() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *data() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* user_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* user_name */) &&
           verifier.Verify(user_name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* data */) &&
           verifier.Verify(data()) &&
           verifier.VerifyVectorOfStrings(data()) &&
           verifier.EndTable();
  }
};

struct myclassBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user_id(uint32_t user_id) { fbb_.AddElement<uint32_t>(4, user_id, 0); }
  void add_user_name(flatbuffers::Offset<flatbuffers::String> user_name) { fbb_.AddOffset(6, user_name); }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> data) { fbb_.AddOffset(8, data); }
  myclassBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  myclassBuilder &operator=(const myclassBuilder &);
  flatbuffers::Offset<myclass> Finish() {
    auto o = flatbuffers::Offset<myclass>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<myclass> Createmyclass(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t user_id = 0,
   flatbuffers::Offset<flatbuffers::String> user_name = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> data = 0) {
  myclassBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_user_name(user_name);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

inline const myclass *Getmyclass(const void *buf) { return flatbuffers::GetRoot<myclass>(buf); }

inline bool VerifymyclassBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<myclass>(); }

inline void FinishmyclassBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<myclass> root) { fbb.Finish(root); }


#endif  // FLATBUFFERS_GENERATED_TEST_H_
